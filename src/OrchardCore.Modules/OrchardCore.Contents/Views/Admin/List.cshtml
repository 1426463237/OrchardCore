@model ListContentsViewModel
@using OrchardCore.ContentManagement;
@using OrchardCore.Contents.ViewModels;
@inject IContentManager ContentManager
@inject OrchardCore.Environment.Shell.ShellSettings ShellSettings

@{
    dynamic contentItemModel = Model;
    var typeDisplayName = Model.TypeDisplayName;
    var pageTitle = T["Manage Content"];
    var createLinkText = T["Create New Content"];
    if (!string.IsNullOrWhiteSpace(typeDisplayName))
    {
        pageTitle = T["Manage {0} Content", (string)typeDisplayName];
        createLinkText = T["Create New {0}", (string)typeDisplayName];
    }

    var tenantPrefix = ("/" + ShellSettings.RequestUrlPrefix ?? string.Empty).TrimEnd('/');
    var formActionWithoutTypeName = tenantPrefix + "/Admin/Contents/ContentItems";

    IEnumerable<string> cultures = Model.Options.Cultures;
    List<SelectListItem> contentStatuses = new List<SelectListItem>() {
        new SelectListItem() { Text = T["latest"].Value, Value = ContentsStatus.Latest.ToString() },
        new SelectListItem() { Text = T["owned by me"].Value, Value = ContentsStatus.Owner.ToString() },
        new SelectListItem() { Text = T["published"].Value, Value = ContentsStatus.Published.ToString() },
        new SelectListItem() { Text = T["unpublished"].Value, Value = ContentsStatus.Draft.ToString() },
        new SelectListItem() { Text = T["all versions"].Value, Value = ContentsStatus.AllVersions.ToString() }
    };
    contentStatuses.Where(s => s.Value == Model.Options.ContentsStatus.ToString()).FirstOrDefault().Selected = true;

    List<SelectListItem> contentSorts = new List<SelectListItem>() {
        new SelectListItem() { Text = T["recently created"].Value, Value = ContentsOrder.Created.ToString() },
        new SelectListItem() { Text = T["recently modified"].Value, Value = ContentsOrder.Modified.ToString() },
        new SelectListItem() { Text = T["recently published"].Value, Value = ContentsOrder.Published.ToString() },
        new SelectListItem() { Text = T["title"].Value, Value = ContentsOrder.Title.ToString() }
    };
    contentSorts.Where(s => s.Value == Model.Options.OrderBy.ToString()).FirstOrDefault().Selected = true;

    List<SelectListItem> contentsBulkAction = new List<SelectListItem>() {
        new SelectListItem() { Text = T["Choose action..."].Value, Value = ContentsBulkAction.None.ToString() },
        new SelectListItem() { Text = T["Publish Now"].Value, Value = ContentsBulkAction.PublishNow.ToString() },
        new SelectListItem() { Text = T["Unpublish"].Value, Value = ContentsBulkAction.Unpublish.ToString() },
        new SelectListItem() { Text = T["Delete"].Value, Value = ContentsBulkAction.Remove.ToString() }
    };
}
<h1>@RenderTitleSegments(pageTitle)</h1>
@using (Html.BeginForm("List", "Admin", FormMethod.Post, new { id = "items-form" }))
{
    <input type="submit" name="submit.Filter" id="submitFilter" class="d-none" />

    <fieldset class="filter-options">
        <div class="card mb-3">
            <div class="card-body bg-light">
                <div class="row">
                    <div class="form-group col-xl-4">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-secondary text-light">@T["Actions"]</span>
                            </div>
                            <select asp-for="Options.BulkAction" class="form-control" asp-items="@contentsBulkAction"></select>
                            <div class="input-group-append">
                                <button class="input-group-text bg-secondary text-light" type="submit" name="submit.BulkEdit">@T["Apply"]</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-xl-3 mb-xl-n1">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-secondary text-light">@T["Title"]</span>
                            </div>
                            <input asp-for="DisplayText" id="DisplayText" class="form-control" name="DisplayText" />
                        </div>
                    </div>
                    <div class="form-group col-xl-3 mb-xl-n1">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-secondary text-light">@T["Filter"]</span>
                            </div>
                            <select asp-for="Options.SelectedFilter" class="form-control">
                                <option value="">@T["All content types"]</option>
                                @foreach (var option in Model.Options.FilterOptions)
                                {
                                    string isSelected = option.Key == Model.Options.SelectedFilter ? "selected='selected'" : string.Empty;
                                    <!option @isSelected value="@option.Key">@option.Value</!option>
                                }
                            </select>
                        </div>
                    </div>

                    @*@if (cultures.Count() > 1) {
                        <div class="col-md-2 col-xl-1 form-group">
                            <label for="filterCultures" class="label col-form-label">@T["Culture"]</label>
                        </div>
                        <div class="col-md-4 col-xl-3 form-group">
                            <select id="filterCultures" class="form-control" name="Options.SelectedCulture">
                                <option value="">@T["All cultures"]</option>
                                @foreach (string culture in cultures) {
                                    string isSelected = culture == Model.Options.SelectedCulture ? "selected='selected'" : string.Empty;
                                    <!option @isSelected value="culture">@System.Globalization.CultureInfo.GetCultureInfo(culture).DisplayName</!option>
                                }
                            </select>
                        </div>
                        }*@
                    <div class="form-group col-xl-3 mb-xl-n1">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-secondary text-light">@T["Show"]</span>
                            </div>
                            <select asp-for="Options.ContentsStatus" class="form-control" asp-items="@contentStatuses"></select>
                        </div>
                    </div>
                    <div class="form-group col-xl-3 mb-n1">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-secondary text-light">@T["Sort by"]</span>
                            </div>
                            <select asp-for="Options.OrderBy" class="form-control" asp-items="@contentSorts"></select>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </fieldset>
    <input type="checkbox" class="check-all" />@T["Select all"]

    @if (contentItemModel.ContentItems.Count > 0)
    {
        <ul class="list-group">
            @foreach (var contentItemSummary in contentItemModel.ContentItems)
            {
                <li class="list-group-item">
                    @await DisplayAsync(contentItemSummary)
                </li>
            }
        </ul>
    }
    else
    {
        <div class="alert alert-info">
            @T["No result found."]
        </div>
    }

    @await DisplayAsync(contentItemModel.Pager)
}

@* This is because ContentTypesAdminNode requires the ContenType to be available as part of the url *@
<script at="Foot" type="text/javascript">
    $(function () {
        $("#contentResults").change(function (e) {
            var value = $('#contentResults option:selected').val();
            console.log(value);
            var newAction = '@formActionWithoutTypeName' + '/' + value;
            $('#items-form').attr('action', newAction);
        });
    })
    $(function () {
        $(".filter-options select, .filter-options input").on("change", function () {
            //this.form.submit();
            $("#submitFilter").click();
        });
    })
</script>